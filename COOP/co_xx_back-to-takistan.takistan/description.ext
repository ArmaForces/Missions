#include "script_component.hpp"
#include "gui\gui_init.hpp"

/* Respawn stuff */
respawn = 3;
respawnDelay = 1e10;
respawnTemplates[] = {"afm_respawn_default"};
// Jeśli misja nie przewiduje standardowego respawnu na czas to można usunąć "Counter".
// Tj. dla misji permadeath i z własnym respawnem np. po wykonaniu zadania.
// Dla kompatybilności z modułem obserwatora:
respawnTemplatesVirtual[] = {"Spectator"};

disableChannels[] = {1, 2, 3, 4, 5};

/* Mission description and stuff */
author = "3Mydlo3";
onLoadIntro = CSTRING(Mission_ShortDescription);
briefingName = CSTRING(DisplayName);
onLoadMission = CSTRING(Mission_ShortDescription);
onLoadName = CSTRING(Mission_Title);

class Header {
    gameType = Coop;
    minPlayers = 20;
    maxPlayers = 51;
};

/* Other stuff */
disabledAI = true;

// Bibloteka funkcji
class CfgFunctions {
    #include "AF_functions.hpp"
};

// Ustawienia CBA muszą być dodane poprzez CBA XEH PreInit, w przeciwnym wypadku nie będą dostępne w edytorze
class Extended_PreInit_EventHandlers {

};

// https://github.com/acemod/ACEX/tree/master/addons/killtracker
class CfgDebriefingSections {
    class acex_killTracker {
        title = "Acex Killed Events";
        variable = "acex_killTracker_outputText";
    };
};

// For AF - Mods Tasks Framework
#include "CfgTasks.hpp"

// import RscInfoText;
// import Controls from RscInfoText;
// import RscText;
class RscTitles {
import RscInfoText from RscTitles;
class RscInfoTextEdit : RscInfoText {
    idd = 310069;
    onLoad = "uinamespace setvariable ['AFP_Scripts_InfoText', _this select 0]";
    onUnload = "uinamespace setvariable ['AFP_Scripts_InfoText', nil]";
    class Controls :Controls {
        class InfoText : InfoText {
            colorShadow[] = {0, 1, 0, 1};
            colorText[] = {0, 0.7, 0, 0.6};
            // fixedWidth = 0;
            // font = "RobotoCondensed";
            font = "EtelkaMonospacePro";
            idc = 310169;
            sizeEx = 0.045;
            // style = "0x01 + 0x10";
            style = "0x01 + 0x10 + 0x200";
            // style = "0x01 + 0x10 + 0x200 + 0x100";
            h = "(8 * 			(			(			((safezoneW / safezoneH) min 1.2) / 1.2) / 25))";
            w = "(35 * ( ((safezoneW / safezoneH) min 1.2) / 40))";
            x = "(safezoneX + safezoneW - 36 * 			(			((safezoneW / safezoneH) min 1.2) / 40))";
            y = "(safezoneY + safezoneH - 14 * 			(			(			((safezoneW / safezoneH) min 1.2) / 1.2) / 25))";
            // h = "(5 * 			(			(			((safezoneW / safezoneH) min 1.2) / 1.2) / 25))";
            // w = "(20 * ( ((safezoneW / safezoneH) min 1.2) / 40))";
            // x = "(profilenamespace getvariable [""IGUI_GRID_MISSION_X"",		(safezoneX + safezoneW - 21 * 			(			((safezoneW / safezoneH) min 1.2) / 40))])";
            // y = "(profilenamespace getvariable [""IGUI_GRID_MISSION_Y"",		(safezoneY + safezoneH - 10.5 * 			(			(			((safezoneW / safezoneH) min 1.2) / 1.2) / 25))])";
            // class Attributes {
            //     font = "EtelkaMonospaceProBold";
	        //     color = "#ffffff";
            //     // colorLink = "#D09B43";
	        //     align = "left";
	        //     shadow = 0;
            // };
        };
    };
};

};